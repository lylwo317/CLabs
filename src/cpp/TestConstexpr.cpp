//
// Created by kevin on 2021/6/14.
//
#include <cstdio>

//常量(const)
//初始化后值不能改变的变量

//常量表达式 = 常量 + 编译期得到计算结果
//是指值不会改变(常量），且在编译过程就能得到计算结果的表达式

//常量表达式的作用，为了能提升程序运行效率，减少不必要的函数调用。通过编译期计算出结果，代替运行时函数调用。

// constexpr 变量
// 作用：因为在一个复杂的系统中，很难分辨判断一个表达式是否是常量，而将变量定义const也无法确定是否编译期就能计算结果
// 所以通过constexpr来声明变量，编译器便会帮我们验证变量是否是常量表达式

//当声明变量为constexpr，编译器便会帮我们验证变量是否是常量表达式
//所以声明为constexpr的变量，一定是一个常量，并且必须用常量表达式初始化，否则编译就会报错

//constexpr 函数
//作用：声明为constexpr函数，这样才能在参数是常量表达式的时候，当做常量表达式计算出结果
//从而替换掉函数调用，免去函数调用的开销

//注意：
// 1. 如果传的参数是常量表达式，函数就是常量表达式。
// 这个时候可以给常量表达式赋值，也可以被普通变量赋值。但是都是将编译期计算的结果赋值给变量，而不会有函数调用

// 2. 如果传的参数不是常量表达式，函数的就不是常量表达式。
// 这个时候只可以给普通变量赋值(与普通函数调用没有区别），给常量表达式赋值就会报错

//要求：
//1. 返回值必须是字面值类型(算数类型，指针，引用）
//2. 函数体中有且只有一条return语句
//3. 需要定义在头文件，这样才能在编译时展开
constexpr int sum(int v1, int v2){//隐式inline
    return v1 + v2;
}

int sum2(int v1, int v2){
    return v1 + v2;
}

int main()
{
//    const int mf = 20;//常量表达式，编译器不会帮忙验证
    constexpr int mf = 20;//常量表达式，编译器会帮忙验证

//    const int mfg = mf + 2;//常量表达式
    constexpr int mfg = mf + 2;//常量表达式

    int i = 1;//不是常量表达式
    //是常量，但不是常量表达式，需要运行时才能计算出summary1
    // 原因是sum(i,2)虽然是constexpr函数，但是传的参数i不是常量表达式，导致sum(i,2)不是常量表达式
    // 由于没有加constexpr，所以编译器不会检查是否是常量表达式。
    const int summary1 = sum(i, 2);
    // 添加constexpr，编译就会报错，因为这个不是常量表达式
    //constexpr int summary2 = sum(i, 2);//错误，sum(i,2)必须要是常量表达式

    //因为sum2(int,int)不是常量表达式函数
//    constexpr int summary2 = sum2(2, 2);//报错

    int r = sum(23, 40);//相当于int r = 63;
    int g = sum(i, 30);//函数调用后赋值给g

    return 0;
}
